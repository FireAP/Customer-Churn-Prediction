# -*- coding: utf-8 -*-
"""Deployment_Customer_Churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V19iSolUsrcPeuU6fCspuJH7PmKfkaV0
"""

import streamlit as st
import pandas as pd
import pickle
import shap
import matplotlib.pyplot as plt
import joblib

#App Dev
model_pipeline = joblib.load("xgboost_pipeline.pkl")

st.title("Churn Risk Dashboard")
st.markdown("Interactive dashboard to explore churn predictions and feature impact.")


st.sidebar.header("Cohort Filters")
plan_type = st.sidebar.selectbox("Subscription Type", ["Basic","Standard","Premium"])
tenure = st.sidebar.slider("Tenure",0,60,(0,60))
avg_watch_time = st.sidebar.slider("Average Daily Watchtime",0.0,12.0,(0.0,12.0))


uploaded_file = st.file_uploader("Upload user data in CSV format",type=["csv"])
if uploaded_file:
  df = pd.read_csv(uploaded_file)
  cohort_df = df[
        (df['subscription_type'] == plan_type) &
        (df['tenure'].between(*tenure)) &
        (df['avg_watch_time_per_day'].between(*avg_watch_time))
    ]
else:
  st.info("Upload a CSV to view cohort predictions.")
  cohort_df = pd.DataFrame()


st.subheader("Single User Prediction")
with st.form("user_input_form"):
    # Collect features for prediction
    age = st.number_input("Age", 0, 100, 30)
    gender = st.selectbox("Gender", ["Male", "Female"])
    subscription_type = st.selectbox("Subscription Type", ["Basic", "Standard", "Premium"])
    watch_hours = st.number_input("Watch Hours", 0.0, 100.0, 5.0)
    monthly_fee = st.number_input("Monthly Fee", 0.0, 50.0, 10.0)
    number_of_profiles = st.number_input("Number of Profiles", 1, 10, 1)
    avg_watch_time_per_day = st.number_input("Avg Watch Time/Day", 0.0, 12.0, 1.0)
    favorite_genre = st.selectbox("Favorite Genre", ["Action", "Comedy", "Drama", "Other"])

    submitted = st.form_submit_button("Predict Churn")

    if submitted:
        input_df = pd.DataFrame([{
            'age': age,
            'gender': gender,
            'subscription_type': subscription_type,
            'watch_hours': watch_hours,
            'monthly_fee': monthly_fee,
            'number_of_profiles': number_of_profiles,
            'avg_watch_time_per_day': avg_watch_time_per_day,
            'favorite_genre': favorite_genre
        }])
        prob = model_pipeline.predict_proba(input_df)[0][1]
        pred = model_pipeline.predict(input_df)[0]
        st.metric("Churn Prediction", "Yes" if pred else "No")
        st.progress(prob)

        # -------------------------
        # SHAP Interpretation
        # -------------------------
        explainer = shap.Explainer(model_pipeline.named_steps['classifier'],
                                   model_pipeline.named_steps['preprocessor'].transform(input_df))
        shap_values = explainer(model_pipeline.named_steps['preprocessor'].transform(input_df))
        st.subheader("Feature Impact (SHAP)")
        shap.summary_plot(shap_values, input_df, show=False)
        st.pyplot(plt.gcf())
        plt.clf()

# -------------------------
# Cohort Predictions Table
# -------------------------
if not cohort_df.empty:
    st.subheader("Cohort Predictions")
    cohort_df['churn_prob'] = model_pipeline.predict_proba(cohort_df)[:, 1]
    st.dataframe(cohort_df)

